#labels Phase-Design,Featured
A description of the default priors on each parameter of the standard models in BEAUti

= Introduction =

The aim is to provide every parameter with a proper and reasonable prior. This document is to describe our choices and the rationale behind each.

= Parameters =

== Substitution Models ==
|| *Parameter* || *Description* || *Bounds* || *Default Prior* || *Rationale/Comments* ||
|| `*`.frequencies || base frequencies || 0,1 || uniform || ||
|| `*`.kappa || HKY transition-transversion parameter  || 0,+Inf || 1/x || ||
|| `*`.kappa1 || TN93 1st transition-transversion parameter  || 0,+Inf || 1/x || ||
|| `*`.kappa2 || TN93 2nd transition-transversion parameter  || 0,+Inf || 1/x || ||
|| `*`.ac etc. || GTR A-C, etc. substitution parameter  || 1E-8,+Inf || 1/x || The lower bound is to prevent issues with 1/x prior when this value approaches zero - a better solution would be to change the prior on this ||
|| hfrequencies || Binary Covarion frequencies of the hidden rates  || 0,1 || uniform || ||
|| bcov.alpha || Binary Covarion rate of evolution in slow mode  || 0,1 || uniform || ||
|| bcov.s || Binary Covarion rate of flipping between slow and fast modes  || 0,+Inf || uniform || ||

== Site Models ==
|| *Parameter* || *Description* || *Bounds* || *Default Prior* || *Rationale/Comments* ||
|| `*`.alpha || Gamma shape parameter || 1E-8,+Inf || uniform || The lower bound is to prevent numerical issues with the quantiles for exceptionally low values ||
|| `*`.pInv || proportion of invariant sites parameter || 0,1 || uniform || ||
|| `*`.mu || relative rate parameter || 0,+Inf || uniform || ||

== Clock Models ==
|| *Parameter* || *Description* || *Bounds* || *Default Prior* || *Rationale/Comments* ||
|| clock.rate || Strict clock substitution rate || 0,+Inf || uniform || ||
|| uced.mean || uncorrelated exponential relaxed clock mean || 0,+Inf || uniform || ||
|| ucld.mean || uncorrelated lognormal relaxed clock mean || 0,+Inf || uniform || ||
|| ucld.stdev || uncorrelated lognormal relaxed clock stdev || 0,+Inf || uniform || ||

_still to do:_
        createParameterGammaPrior("branchRates.var", "autocorrelated lognormal relaxed clock rate variance", PriorScaleType.LOG_VAR_SCALE, 0.1, 1, 0.0001, false); 
        createParameter("branchRates.categories", "relaxed clock branch rate categories");
        createParameterUniformPrior(ClockType.LOCAL_CLOCK + "." + "rates", "random local clock rates", PriorScaleType.SUBSTITUTION_RATE_SCALE, 1.0, 0.0, Double.POSITIVE_INFINITY);
        createParameter(ClockType.LOCAL_CLOCK + "." + "changes", "random local clock rate change indicator");

//        {
//            final Parameter p = createParameter("treeModel.rootRate", "autocorrelated lognormal relaxed clock root rate", PriorScaleType.ROOT_RATE_SCALE, 1.0, 0.0, Double.POSITIVE_INFINITY);
//            p.priorType = PriorType.GAMMA_PRIOR;
//            p.shape = 1;
//            p.scale = 0.0001;
//        }
        createParameterGammaPrior("treeModel.rootRate", "autocorrelated lognormal relaxed clock root rate", PriorScaleType.ROOT_RATE_SCALE, 1.0, 1, 0.0001, false);      
        createParameterUniformPrior("treeModel.nodeRates", "autocorrelated lognormal relaxed clock non-root rates", PriorScaleType.SUBSTITUTION_RATE_SCALE, 1.0, 0.0, Double.POSITIVE_INFINITY);
        createParameterUniformPrior("treeModel.allRates", "autocorrelated lognormal relaxed clock all rates", PriorScaleType.SUBSTITUTION_RATE_SCALE, 1.0, 0.0, Double.POSITIVE_INFINITY);

==Tree Priors==

|| *Parameter* || *Description* || *Bounds* || *Default Prior* || *Rationale/Comments* ||
|| constant.popSize || coalescent population size parameter || 0,+Inf || 1/X || ||

_still to do:_
        createParameterJeffreysPrior("exponential.popSize", "coalescent population size parameter", PriorScaleType.TIME_SCALE, 1.0, 0.0, Double.POSITIVE_INFINITY);
        createParameterUniformPrior("exponential.growthRate", "coalescent growth rate parameter", PriorScaleType.GROWTH_RATE_SCALE, 0.0, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
        createParameterUniformPrior("exponential.doublingTime", "coalescent doubling time parameter", PriorScaleType.TIME_SCALE, 0.5, 0.0, Double.POSITIVE_INFINITY);

        createParameterJeffreysPrior("logistic.popSize", "coalescent population size parameter", PriorScaleType.TIME_SCALE, 1.0, 0.0, Double.POSITIVE_INFINITY);
        createParameterUniformPrior("logistic.growthRate", "coalescent logistic growth rate parameter", PriorScaleType.GROWTH_RATE_SCALE, 0.001, 0.0, Double.POSITIVE_INFINITY);
        createParameterUniformPrior("logistic.doublingTime", "coalescent doubling time parameter", PriorScaleType.TIME_SCALE, 0.5, 0.0, Double.POSITIVE_INFINITY);
        createParameterUniformPrior("logistic.t50", "logistic shape parameter", PriorScaleType.T50_SCALE, 0.1, 0.0, Double.POSITIVE_INFINITY);

        createParameterJeffreysPrior("expansion.popSize", "coalescent population size parameter", PriorScaleType.TIME_SCALE, 1.0, 0.0, Double.POSITIVE_INFINITY);
        createParameterUniformPrior("expansion.growthRate", "coalescent logistic growth rate parameter", PriorScaleType.GROWTH_RATE_SCALE, 0.001, 0.0, Double.POSITIVE_INFINITY);
        createParameterUniformPrior("expansion.doublingTime", "coalescent doubling time parameter", PriorScaleType.TIME_SCALE, 0.5, 0.0, Double.POSITIVE_INFINITY);
        createParameterUniformPrior("expansion.ancestralProportion", "ancestral population proportion", PriorScaleType.NONE, 0.1, 0.0, 1.0);

        createParameterUniformPrior("skyline.popSize", "Bayesian Skyline population sizes", PriorScaleType.TIME_SCALE, 1.0, 0.0, Double.POSITIVE_INFINITY);
        createParameter("skyline.groupSize", "Bayesian Skyline group sizes");

        createParameterUniformPrior("skyride.popSize", "GMRF Bayesian skyride population sizes", PriorScaleType.TIME_SCALE, 1.0, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY);
        createParameter("skyride.groupSize", "GMRF Bayesian skyride group sizes (for backward compatibility)");
        createParameterGammaPrior("skyride.precision", "GMRF Bayesian skyride precision", PriorScaleType.NONE, 1.0, 0.001, 1000, true);
//        {
//            final Parameter p = createParameter("skyride.precision", "GMRF Bayesian skyride precision", PriorScaleType.NONE, 1.0, 0.0, Double.POSITIVE_INFINITY);
//            p.priorType = PriorType.GAMMA_PRIOR;
//            p.shape = 0.001;
//            p.scale = 1000;
//            p.priorFixed = true;
//        }
        createParameterUniformPrior("demographic.popSize", "Extended Bayesian Skyline population sizes", PriorScaleType.TIME_SCALE, 1.0, 0.0, Double.POSITIVE_INFINITY);
        createParameter("demographic.indicators", "Extended Bayesian Skyline population switch");
        createParameterJeffreysPrior("demographic.populationMean", "Extended Bayesian Skyline population prior mean", PriorScaleType.TIME_SCALE, 1, 0, Double.POSITIVE_INFINITY);
//        {
//            final Parameter p = createStatistic("demographic.populationSizeChanges", "Average number of population change points", true);
//            p.priorType = PriorType.POISSON_PRIOR;
//            p.mean = Math.log(2);
//        }
        createParameterUniformPrior("yule.birthRate", "Yule speciation process birth rate", PriorScaleType.BIRTH_RATE_SCALE, 1.0, 0.0, Double.POSITIVE_INFINITY);

        createParameterUniformPrior(BirthDeathModelParser.BIRTHDIFF_RATE_PARAM_NAME, "Birth-Death speciation process rate", PriorScaleType.BIRTH_RATE_SCALE, 1.0, 0.0, Double.POSITIVE_INFINITY);
        createParameterUniformPrior(BirthDeathModelParser.RELATIVE_DEATH_RATE_PARAM_NAME, "Death/Birth speciation process relative death rate", PriorScaleType.BIRTH_RATE_SCALE, 0.5, 0.0, 1.0);